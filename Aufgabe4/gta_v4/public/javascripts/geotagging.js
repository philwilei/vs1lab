// File origin: VS1LAB A2

/* eslint-disable no-unused-vars */

const RESULT_PAGE_LENGTH = 5;

function callback(location) {
    document.getElementById("tagging-lat").value = location.latitude;
    document.getElementById("tagging-lon").value = location.longitude;
    document.getElementById("discovery-lat").value = location.latitude;
    document.getElementById("discovery-lon").value = location.longitude;

    renderMap(location.latitude, location.longitude);
}

function updateLocation() {
    let latElem = document.getElementById("tagging-lat");
    let lonElem = document.getElementById("tagging-lon");
    let lat = latElem.value;
    
    if (lat === undefined || lat === "" || lat === "0") {
        console.log("Geolocating device...")
        LocationHelper.findLocation(callback);
    } else {
        renderMap(latElem.value, lonElem.value);
    }
    
    return [latElem.value, lonElem.value];
}

/**
 * Strip the `limit` query parameter from a URL generated by {@link generateUrl} and calculate the number 
 * of result pages the geotags will be distributed over. Result page length is set via the `RESULT_PAGE_LENGTH` constant.
 * @param {String} url An API request URL as generated by {@link generateUrl}
 * @returns The number of pages to required display all Geotags returned by the given URL
 */
async function calculatePageCount(url) {
    return fetch(url.split("&limit=")[0])
        .then(resp => resp.json()
            .then(body => Math.ceil(body.length / RESULT_PAGE_LENGTH)));
}

/**
 * Assemble a URL for getting Geotags matching the current filters.
 * @param {Number} startIndex Value for the &start= parameter
 * @param {Number} limit Value for the &value= parameter
 * @returns Current filters and given parameters encoded as a URL for the API
 */
function generateUrl(startIndex = 0, limit = -1) {
    const [latitude, longitude] = updateLocation();
    const query = document.getElementById("discovery-query").value;
    let url = `/api/geotags?latitude=${latitude}&longitude=${longitude}`;
    if (query !== "")
        url += `&searchTerm=${encodeURIComponent(query)}`;
    url += `&start=${startIndex}`;
    if (limit !== -1)
        url += `&limit=${limit}`;
    
    return url;
}

/**
 * Display an error message at the top of the page.
 * @param {String} msg Message text to display
 * @param {Number} duration Duration in ms the message will be displayed for
 */
function showErrorMessage(msg, duration = 5000) {
    let errorMessageBox = document.getElementById("errorMessage");
    errorMessageBox.textContent = msg;
    errorMessageBox.style.display = "block";
    setTimeout(() => errorMessageBox.style.display = "none", duration)
}

/**
 * Display a success message at the top of the page.
 * @param {String} msg Message text to display
 * @param {Number} duration Duration in ms the message will be displayed for
 */
function showSuccessMessage(msg, duration = 5000) {
    let successMessageBox = document.getElementById("successMessage");
    successMessageBox.textContent = msg;
    successMessageBox.style.display = "block";
    setTimeout(() => successMessageBox.style.display = "none", duration);
}

/**
 * Create a list element for each Geotag in `taglist` and add it to the markup.
 * Then, initiate a map update to display flags for all the Geotags in `taglist`.
 * @param {Array} taglist JSON list of Geotags to display
 */
function renderGeotags(taglist) {
    const geotagList = document.getElementById("discoveryResults");
    if (taglist.length == 0) {
        // Handle an empty taglist (= no search results)
        let elem = document.createElement("li");
        elem.innerHTML = "No results.";
        geotagList.replaceChildren(elem);
        document.getElementById("pageNumber").innerHTML = "0 / 0";
    } else {
        // Populate result list
        geotagList.replaceChildren(...taglist.map(geotag => {
            let listElement = document.createElement("li");
            listElement.innerHTML = `${geotag.name} (${geotag.latitude}, ${geotag.longitude}) ${geotag.hashtag})`;
            return listElement;
        }));
    }
    // Populate image element data-* tag
    document.getElementById("mapView").dataset.tags = JSON.stringify(taglist);
    renderMap(...updateLocation())
}

/**
 * Generate a MapQuest API URL and update the markup of the image element accordingly.
 * Flags to be shown on the map will be taken from the `data-tags` attribute on the image element.
 * @param {Number} latitude Latitude to center the map on
 * @param {Number} longitude Longitude to center the map on
 */
function renderMap(latitude, longitude) {
    let mm = new MapManager("sc6jpukJS5sAEagIHrhiRZpJuWexIsEQ");
    let imageElement = document.getElementById("mapView");
    imageElement.src = mm.getMapUrl(latitude, longitude, JSON.parse(imageElement.dataset.tags), 14);
}

/**
 * POST the content of the tagging form to the server, then show a success/error message
 * depending on the response.
 */
async function handleTaggingForm(submitEvent) {
    submitEvent.preventDefault();
    const response = await fetch("/api/geotags", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            latitude: document.getElementById("tagging-lat").value,
            longitude: document.getElementById("tagging-lon").value,
            name: document.getElementById("tagging-name").value,
            hashtag: document.getElementById("tagging-tags").value
        })
    });

    if (!response.ok)
        showErrorMessage("An error occurred while trying to add the GeoTag.");
    else
        showSuccessMessage("New GeoTag has been added.");

    loadGeotags(0, true);
}

/**
 * Handle the discovery form
 */
async function handleDiscoveryForm(submitEvent) {
    submitEvent.preventDefault();
    loadGeotags(0, true);
}

/**
 * Fetch Geotags for and display a result page. Location and search term will be taken from the DOM.
 * Also update the pagination buttons, and disable them when necessary.
 * @param {Number} pageNumber Result page to load, starting at 0
 * @param {Boolean} isNewQuery Wether to recalculate the total number of result pages
 */
async function loadGeotags(pageNumber, isNewQuery = false) {
    let nextPageButton = document.getElementById("paginationNext");
    let prevPageButton = document.getElementById("paginationPrev");
    let resultList = document.getElementById("discoveryResults");
    let pageNumberElem = document.getElementById("pageNumber");
    const startIndex = pageNumber * RESULT_PAGE_LENGTH;
    const url = generateUrl(startIndex, RESULT_PAGE_LENGTH);

    // Only update the page count when processing a new form submission or first page load
    // to prevent unnecessary API requests
    if (isNewQuery)
        resultList.dataset.pageCount = await calculatePageCount(url);

    // Update the current / total page counter
    pageNumberElem.innerHTML = `${pageNumber + 1} / ${resultList.dataset.pageCount}`;
    
    prevPageButton.dataset.page = pageNumber - 1;
    prevPageButton.disabled = pageNumber <= 0;
    
    nextPageButton.dataset.page = pageNumber + 1;
    nextPageButton.disabled = pageNumber >= resultList.dataset.pageCount - 1;

    renderGeotags(await (await fetch(url)).json());
}

document.addEventListener("DOMContentLoaded", async () => {
    updateLocation();
    document.getElementById("tag-form").addEventListener("submit", handleTaggingForm);
    document.getElementById("discoveryFilterForm").addEventListener("submit", handleDiscoveryForm);
    document.getElementById("paginationNext").addEventListener("click", e => loadGeotags(parseInt(e.currentTarget.dataset.page)));
    document.getElementById("paginationPrev").addEventListener("click", e => loadGeotags(parseInt(e.currentTarget.dataset.page)));
    loadGeotags(0, true);
});

// https://github.com/Loigzorn/vs1lab/blob/master/Aufgabe4/gta_v4_template/public/javascripts/geotagging.js#L145